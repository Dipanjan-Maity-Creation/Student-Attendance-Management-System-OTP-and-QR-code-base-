/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import dao.ConnectionProvider;
import java.awt.Color;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.table.DefaultTableModel;
import utility.bdutility;
import java.sql.*;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author NEHA MAITY
 */
public class viewattandance extends javax.swing.JFrame {

    /**
     * Creates new form viewattandance
     */
    public viewattandance() {
        initComponents();
        bdutility.setImage(this, "images/hellobg.jpg", 1354, 759);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4,4,4,4, Color.black));
        
        dateChooserFrom.setDateFormatString("yyyy-MM-dd");
        dateChooseTo.setDateFormatString("yyyy-MM-dd");
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UserTable = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        dateChooserFrom = new com.toedter.calendar.JDateChooser();
        dateChooseTo = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        presentLBL = new javax.swing.JLabel();
        checkBoxContact = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        absentLBL = new javax.swing.JLabel();
        presentlbl = new javax.swing.JLabel();
        absentlbl = new javax.swing.JLabel();
        checkBoxAddress = new javax.swing.JCheckBox();
        checkBoxCountry = new javax.swing.JCheckBox();
        checkBoxState = new javax.swing.JCheckBox();
        checkBoxUniqRegId = new javax.swing.JCheckBox();
        btnResetFilter = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1354, 759));
        setMinimumSize(new java.awt.Dimension(1354, 759));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnExit.setText("X");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 30)); // NOI18N
        jLabel1.setText("View Attendance");

        UserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(UserTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("On/From");

        txtSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        dateChooserFrom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateChooserFrom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateChooserFromPropertyChange(evt);
            }
        });

        dateChooseTo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateChooseTo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateChooseToPropertyChange(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("To");

        presentLBL.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        presentLBL.setText("Present:");

        checkBoxContact.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        checkBoxContact.setText("Contact");
        checkBoxContact.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxContactItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Search");

        absentLBL.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        absentLBL.setText("Absent");

        presentlbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        presentlbl.setForeground(new java.awt.Color(0, 204, 204));
        presentlbl.setText("----------");

        absentlbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        absentlbl.setForeground(new java.awt.Color(255, 102, 102));
        absentlbl.setText("----------");

        checkBoxAddress.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        checkBoxAddress.setText("Address");
        checkBoxAddress.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkBoxAddressMouseClicked(evt);
            }
        });

        checkBoxCountry.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        checkBoxCountry.setText("Country");
        checkBoxCountry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkBoxCountryMouseClicked(evt);
            }
        });
        checkBoxCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxCountryActionPerformed(evt);
            }
        });

        checkBoxState.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        checkBoxState.setText("State");
        checkBoxState.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxStateItemStateChanged(evt);
            }
        });
        checkBoxState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkBoxStateMouseClicked(evt);
            }
        });
        checkBoxState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxStateActionPerformed(evt);
            }
        });

        checkBoxUniqRegId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        checkBoxUniqRegId.setText("Uniqe Reg Id");
        checkBoxUniqRegId.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkBoxUniqRegIdMouseClicked(evt);
            }
        });
        checkBoxUniqRegId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxUniqRegIdActionPerformed(evt);
            }
        });

        btnResetFilter.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnResetFilter.setText("Reset Filter");
        btnResetFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(285, 285, 285)
                                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(absentLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(presentLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(presentlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(absentlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(checkBoxState, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBoxUniqRegId)
                                    .addComponent(checkBoxCountry, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBoxAddress, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBoxContact, javax.swing.GroupLayout.Alignment.LEADING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnResetFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dateChooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(dateChooseTo, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(129, 129, 129)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 337, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1))
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGap(531, 531, 531)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExit)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(121, 121, 121)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(presentLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(presentlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(absentLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(absentlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(61, 61, 61)
                        .addComponent(checkBoxContact)
                        .addGap(33, 33, 33)
                        .addComponent(checkBoxAddress)
                        .addGap(32, 32, 32)
                        .addComponent(checkBoxState)
                        .addGap(29, 29, 29)
                        .addComponent(checkBoxCountry)
                        .addGap(29, 29, 29)
                        .addComponent(checkBoxUniqRegId)
                        .addGap(141, 141, 141)
                        .addComponent(btnResetFilter))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(78, 78, 78)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(37, 37, 37)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dateChooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(dateChooseTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void checkBoxStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxStateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxStateActionPerformed

    private void checkBoxCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxCountryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxCountryActionPerformed

    private void checkBoxUniqRegIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxUniqRegIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxUniqRegIdActionPerformed

    private void btnResetFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFilterActionPerformed
       txtSearch.setText("");
       dateChooserFrom.setDate(null);
       dateChooseTo.setDate(null);
       checkBoxContact.setSelected(false);
       checkBoxAddress.setSelected(false);
       checkBoxCountry.setSelected(false);
       checkBoxState.setSelected(false);
       checkBoxUniqRegId.setSelected(false);
       
       loadDataInTable();
       
    }//GEN-LAST:event_btnResetFilterActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
       loadDataInTable();
    }//GEN-LAST:event_formComponentShown

    private void checkBoxContactItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxContactItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxContactItemStateChanged

    private void checkBoxCountryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkBoxCountryMouseClicked
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_checkBoxCountryMouseClicked

    private void checkBoxStateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkBoxStateMouseClicked
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_checkBoxStateMouseClicked

    private void checkBoxUniqRegIdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkBoxUniqRegIdMouseClicked
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_checkBoxUniqRegIdMouseClicked

    private void checkBoxAddressMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkBoxAddressMouseClicked
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_checkBoxAddressMouseClicked

    private void checkBoxStateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxStateItemStateChanged
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_checkBoxStateItemStateChanged

    private void dateChooserFromPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateChooserFromPropertyChange
        // TODO add your handling code here:
        
    }//GEN-LAST:event_dateChooserFromPropertyChange

    private void dateChooseToPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateChooseToPropertyChange
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_dateChooseToPropertyChange

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_txtSearchKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewattandance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewattandance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewattandance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewattandance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewattandance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable UserTable;
    private javax.swing.JLabel absentLBL;
    private javax.swing.JLabel absentlbl;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnResetFilter;
    private javax.swing.JCheckBox checkBoxAddress;
    private javax.swing.JCheckBox checkBoxContact;
    private javax.swing.JCheckBox checkBoxCountry;
    private javax.swing.JCheckBox checkBoxState;
    private javax.swing.JCheckBox checkBoxUniqRegId;
    private com.toedter.calendar.JDateChooser dateChooseTo;
    private com.toedter.calendar.JDateChooser dateChooserFrom;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel presentLBL;
    private javax.swing.JLabel presentlbl;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

   private void loadDataInTable() {
    List<String> columns = new ArrayList<>(Arrays.asList("ID", "Name", "Gender", "Email", "Date", "CheckIn", "CheckOut", "Work Duration"));
    String searchText = txtSearch.getText().trim();

    LocalDate fromDate = null;
    LocalDate toDate = null;

    Date fromDateFromCal = dateChooserFrom.getDate();
    Date toDateFromCal = dateChooseTo.getDate();

    if (fromDateFromCal != null) {
        fromDate = fromDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }

    if (toDateFromCal != null) {
        toDate = toDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }

    boolean contactIncluded = checkBoxContact.isSelected();
    boolean addressIncluded = checkBoxAddress.isSelected();
    boolean stateIncluded = checkBoxState.isSelected();
    boolean countryIncluded = checkBoxCountry.isSelected();
    boolean uniqueRegIdIncluded = checkBoxUniqRegId.isSelected();

    StringBuilder sqlQuery = new StringBuilder(
        "SELECT ud.id, ud.name, ud.gender, ud.email, ua.date, ua.checkin, ua.checkout, ua.workduration"
    );

    if (contactIncluded) {
        columns.add("Contact");
        sqlQuery.append(", ud.contact");
    }
    if (addressIncluded) {
        columns.add("Address");
        sqlQuery.append(", ud.address");
    }
    if (stateIncluded) {
        columns.add("State");
        sqlQuery.append(", ud.state");
    }
    if (countryIncluded) {
        columns.add("Country");
        sqlQuery.append(", ud.country");
    }
    if (uniqueRegIdIncluded) {
        columns.add("Unique Reg Id");
        sqlQuery.append(", ud.uniqueregid");
    }

    sqlQuery.append(" FROM userdetails AS ud INNER JOIN userattendance AS ua ON ud.id = ua.userid");

    List<String> conditions = new ArrayList<>();
    if (!searchText.isEmpty()) {
        conditions.add("(ud.name LIKE ? OR ud.email LIKE ?)");
    }
    if (fromDate != null && toDate != null) {
        conditions.add("ua.date BETWEEN ? AND ?");
    } else if (fromDate != null) {
        conditions.add("ua.date = ?");
    }

    if (!conditions.isEmpty()) {
        sqlQuery.append(" WHERE ").append(String.join(" AND ", conditions));
    }

    DefaultTableModel model = new DefaultTableModel();
    model.setColumnIdentifiers(columns.toArray());
    UserTable.setModel(model);

    try (Connection con = ConnectionProvider.getCon();
         PreparedStatement stmt = con.prepareStatement(sqlQuery.toString())) {

        int paramIndex = 1;
        if (!searchText.isEmpty()) {
            stmt.setString(paramIndex++, "%" + searchText + "%");
            stmt.setString(paramIndex++, "%" + searchText + "%");
        }
        if (fromDate != null && toDate != null) {
            stmt.setDate(paramIndex++, java.sql.Date.valueOf(fromDate));
            stmt.setDate(paramIndex++, java.sql.Date.valueOf(toDate));
        } else if (fromDate != null) {
            stmt.setDate(paramIndex++, java.sql.Date.valueOf(fromDate));
        }

        ResultSet rs = stmt.executeQuery();
        long presentCount = 0L;
        long absentCount = 0L;
        Set<String> emailList = new HashSet<>();

        while (rs.next()) {
            List<Object> row = new ArrayList<>();
            row.add(rs.getString("id"));
            row.add(rs.getString("name"));
            row.add(rs.getString("gender"));
            row.add(rs.getString("email"));
            emailList.add(rs.getString("email"));
            row.add(rs.getString("date"));
            row.add(rs.getString("checkin"));
            row.add(rs.getString("checkout"));
            row.add(rs.getString("workduration"));

            if (contactIncluded) row.add(rs.getString("contact"));
            if (addressIncluded) row.add(rs.getString("address"));
            if (stateIncluded) row.add(rs.getString("state"));
            if (countryIncluded) row.add(rs.getString("country"));
            if (uniqueRegIdIncluded) row.add(rs.getString("uniqueregid"));

            if (rs.getString("checkout") == null) {
                absentCount++;
            } else {
                presentCount++;
            }
            model.addRow(row.toArray());
        }
        
        
//        if(emailList.size()==1){
//            presentlbl.setVisible(true);
//            absentlbl.setVisible(true);
//            presentLBL.setVisible(true);
//            absentLBL.setVisible(true);
//            
//            
//        }
        

       presentlbl.setText("Present: " + presentCount);
absentlbl.setText("Absent: " + absentCount);

presentlbl.setVisible(true);
absentlbl.setVisible(true);

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Something went wrong: " + ex.getMessage());
        ex.printStackTrace();
    }
}


private Long countWeekdays (LocalDate start, LocalDate end) {

long count= 0;

LocalDate date = start;
while (date.isBefore(end) || date.equals(end)) {

if (!(date.getDayOfWeek() ==DayOfWeek.SATURDAY|| date.getDayOfWeek()== DayOfWeek.SUNDAY)){

count++;

}

date =date.plusDays(1);

}


return count;
}
}
        

        



    

